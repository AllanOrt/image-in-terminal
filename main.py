# Modified version of Retro Arcade Racing Game
# Original by OneLoneCoder (Javidx9)
# Changes made by AllanOrt in 2025
# Licensed under GPLv3

# Move with WASD or the arrow keys. Steer extra by holding Shift. Have fun!

import pygame
import math
import time

class game:
    def __init__(self):
        pygame.init()
        
        # Screen settings
        self.width, self.height = 160, 100
        self.scale = 7
        self.scaled_width, self.scaled_height = self.width * self.scale, self.height * self.scale
        self.screen = pygame.display.set_mode((self.scaled_width, self.scaled_height))
        self.surface = pygame.Surface((self.width, self.height))
        pygame.display.set_caption("Car game")
        pygame.display.set_icon(pygame.image.load('icon.png'))

        # Track
        self.track = [
            (0, 100),
            (0.125, 200),
            (0, 100),
            (-0.25, 100),
            (0, 50),
            (0.125, 300),
            (0, 100),
            (-0.25, 200),
            (0, 100),
            (0.125, 100),
            (0, 300),
            (-0.125, 100),
            (0, 50),
            (0.25, 100),
            (0, 100),
            (0.125, 200),
            (0, 100),
            (-0.25, 100),
            (0, 50),
            (0.125, 300),
            (0, 100),
            (0.375, 200),
            (0, 0)
        ]
        
        self.restart()

        self.run()
    
    def restart(self):
        # Game state
        self.running = True
        self.start_time = time.time()
        self.elapsed_time = 0
        self.clock = pygame.time.Clock()

        # Car properties
        self.car_position = 0  # -1 = left, 0 = center, 1 = right
        self.speed = 0
        self.car_direction = 0
        self.car_shape = []

        # Track properties
        self.curvature = 0
        self.track_curvature = 0
        self.player_curvature = 0
        self.distance = 0
        self.track_distance = sum(section[1] for section in self.track)
        
        # Finish line
        self.finish_line_top = -1
        self.finish_line_bottom = -1
        self.finish_line_offset = int(sum(value[1] for value in self.track) - self.height / 2)

        # Controls
        self.up_pressed = False
        self.down_pressed = False
        self.left_pressed = False
        self.right_pressed = False
        self.shift_pressed = False
        self.space_pressed = False
        
        # Fading at the end of a game
        self.fade_alpha = 0  # Start with no fade

        # Background music
        self.volume = 0.4
        self.decrement_per_tick = self.volume / 300 # 60 ticks * 5 seconds = 300
        pygame.mixer.music.load('music.wav')
        pygame.mixer.music.set_volume(self.volume)
        pygame.mixer.music.play(-1, 1)
        
        # Text
        self.font = pygame.font.Font("font.ttf", 8)
        self.text_timer = None
        
        # High score
        self.high_score = 0
    
    def check_if_new_high_score(self):
        try:
            with open("high_score.txt", "r") as file:
                self.high_score = float(file.read().strip())
        except (FileNotFoundError, ValueError):
            self.high_score = float('inf')

        if self.elapsed_time < self.high_score:
            with open("high_score.txt", "w") as file:
                file.write(str(self.elapsed_time))
            self.new_record = True  # Flag to indicate a new record
        else:
            self.new_record = False

    def run(self):
        while self.running:
            self.update()
            self.draw()
            
            # Scale and display the game surface
            self.screen.blit(pygame.transform.scale(self.surface, (self.scaled_width, self.scaled_height)), (0, 0))
            pygame.display.flip()
            
            # Maintain 60 FPS
            self.clock.tick(60)
            self.update_elapsed_time()

        pygame.quit()
        
    def update(self):
        if self.distance > self.track_distance:            
            self.fade_alpha += 255 / 300 # 255 / (60 ticks * 5s = 300)

            self.volume -= self.decrement_per_tick
            pygame.mixer.music.set_volume(self.volume)

            # Save finish time only once
            if not hasattr(self, "saved_time"):
                self.check_if_new_high_score()
                self.saved_time = True

            # Restart when space is pressed
            if self.space_pressed:
                del self.saved_time
                self.restart()
        
        # Reset car direction
        self.car_direction = 0
        
        # Finish line
        self.finish_line_top = self.distance - self.finish_line_offset - 10  # Edit 10 to change the thickness
        self.finish_line_bottom = self.distance - self.finish_line_offset

        # Handle events
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.running = False
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP or event.key == pygame.K_w:
                    self.up_pressed = True
                elif event.key == pygame.K_DOWN or event.key == pygame.K_s:
                    self.down_pressed = True
                elif event.key == pygame.K_LEFT or event.key == pygame.K_a:
                    self.left_pressed = True
                elif event.key == pygame.K_RIGHT or event.key == pygame.K_d:
                    self.right_pressed = True
                elif event.key == pygame.K_LSHIFT:
                    self.shift_pressed = True
                elif event.key == pygame.K_SPACE:
                    self.space_pressed = True
                    
            elif event.type == pygame.KEYUP:
                if event.key == pygame.K_UP or event.key == pygame.K_w:
                    self.up_pressed = False
                elif event.key == pygame.K_DOWN or event.key == pygame.K_s:
                    self.down_pressed = True
                elif event.key == pygame.K_LEFT or event.key == pygame.K_a:
                    self.left_pressed = False
                elif event.key == pygame.K_RIGHT or event.key == pygame.K_d:
                    self.right_pressed = False
                elif event.key == pygame.K_LSHIFT:
                    self.shift_pressed = False
                elif event.key == pygame.K_SPACE:
                    self.space_pressed = False

        # Adjust speed
        if self.up_pressed:
            self.speed += 0.05
        elif self.down_pressed:
            self.speed -= 0.025
            self.speed *= 0.8
        else:
            self.speed *= 0.975
        
        if self.speed < 0:
            self.speed = 0

        # Handle turning
        if self.speed > 0.1:
            if self.left_pressed:
                if self.shift_pressed:
                    self.player_curvature -= 0.0375
                    self.car_direction = -2
                else:
                    self.player_curvature -= 0.025
                    self.car_direction = -1
                    
            if self.right_pressed:
                if self.shift_pressed:
                    self.player_curvature += 0.0375
                    self.car_direction = 2
                else:
                    self.player_curvature += 0.025
                    self.car_direction += 1

        # Reduce speed if car is on the grass
        if abs(self.car_position) > 0.5:
            self.speed *= 0.9

        self.distance += self.speed
        
        # Stop track updates if speed is zero
        if self.speed == 0:
            return

        offset, n_track_section = 0, 0
        while n_track_section < len(self.track) and offset <= self.distance:
            offset += self.track[n_track_section][1]
            n_track_section += 1

        self.target_curvature = self.track[n_track_section - 1][0] if n_track_section > 0 else 0.0

        # Smooth transition using linear interpolation (lerp)
        self.curvature = self.lerp(self.curvature, self.target_curvature, 0.01 * self.speed)

    def lerp(self, start, end, t):
        return start + (end - start) * t

    def update_elapsed_time(self):
        if self.distance < self.track_distance:
            self.elapsed_time = time.time() - self.start_time  # Use actual elapsed time

        self.track_curvature += self.curvature * self.speed * 0.05
        
    def draw(self):            
        self.draw_sky()
        self.draw_mountains()
        self.draw_road()
        self.draw_car()
        self.draw_text()

        if self.fade_alpha > 0:
            # Start the timer only if it's not already started
            if self.text_timer is None:
                self.text_timer = time.time()

            # Create a semi-transparent black surface to overlay
            overlay = pygame.Surface(self.surface.get_size())
            overlay.fill((0, 0, 0))
            overlay.set_alpha(self.fade_alpha)
            self.surface.blit(overlay, (0, 0))
            self.draw_text()

        # Check if 2.5 seconds have passed
        if self.text_timer and time.time() - self.text_timer >= 2.5:
            high_score = self.elapsed_time if self.new_record else self.high_score
            text_high_score = self.font.render(f"High score: {high_score:.2f} s".replace(".", ","), True, (255, 255, 255))

            text_line1 = self.font.render("Press space", True, (255, 255, 255))
            text_line2 = self.font.render("to play again", True, (255, 255, 255))

            self.surface.blit(text_high_score, (4, 16))
            self.surface.blit(text_line1, ((self.width - text_line1.get_width()) / 2, self.height / 2 - 5))
            self.surface.blit(text_line2, ((self.width - text_line2.get_width()) / 2, self.height / 2 + 5))

    def draw_sky(self):
        """Draws the gradient sky."""
        for y in range(self.height // 2):
            if y < self.height // 12:
                color = (0, 0, 128)
            elif y < self.height * 3 // 12:
                color = (0, 0, 192)
            else:
                color = (0, 0, 255)

            for x in range(self.width):
                self.surface.set_at((x, y), color)

    def draw_mountains(self):
        """Draws background and foreground mountains."""
        for x in range(self.width):
            # Background mountains
            height_bg = int(abs(math.sin(x * 0.025 + self.track_curvature)) * (self.height // 2) * 0.2)
            for y in range(self.height // 2 - height_bg, self.height // 2):
                self.surface.set_at((x, y), (64, 0, 0))

            # Foreground mountains
            height_fg = int(abs(math.sin(x * 0.015 + self.track_curvature * 2)) * (self.height // 2) * 0.25)
            for y in range(self.height // 2 - height_fg, self.height // 2):
                self.surface.set_at((x, y), (128, 64, 0))

    def draw_road(self):
        """Draws the road and surrounding elements."""
        for y in range(self.height // 2):
            perspective = y / (self.height / 2)
            middle_point = 0.5 + self.curvature * (1 - perspective) ** 3
            road_width = 0.05 + perspective * 0.4
            clip_width = road_width * 0.3

            n_grass = int((middle_point - road_width - clip_width) * self.width)
            n_clip = int((middle_point - road_width) * self.width)
            
            # Layer 1
            n_finish_line_layer1 = int((middle_point - road_width * 7 / 7) * self.width)
            n_finish_line_layer1_right = int((middle_point + road_width * 7 / 7) * self.width)
            # Layer 2
            n_finish_line_layer2 = int((middle_point - road_width * 5 / 7) * self.width)
            n_finish_line_layer2_right = int((middle_point + road_width * 5 / 7) * self.width)
            # Layer 3
            n_finish_line_layer3 = int((middle_point - road_width * 3 / 7) * self.width)
            n_finish_line_layer3_right = int((middle_point + road_width * 3 / 7) * self.width)
            # Layer 4
            n_finish_line_layer4 = int((middle_point - road_width * 1 / 7) * self.width)
            n_finish_line_layer4_right = int((middle_point + road_width * 1 / 7) * self.width)
            
            n_clip_right = 2 * int(middle_point * self.width) - n_clip
            n_grass_right = 2 * int(middle_point * self.width) - n_grass
            n_row = self.height // 2 + y

            grass_color = (0, 255, 0) if math.sin(20 * (1 - perspective) ** 3 + self.distance * 0.1) > 0 else (0, 128, 0)
            clip_color = (255, 0, 0) if math.sin(80 * (1 - perspective) ** 3 + self.distance * 0.1) > 0 else (255, 255, 255)
            
            # Layer 1 and 3
            finish_line_odd_layer_color = (255, 255, 255) if math.sin(70 * (1 - perspective) ** 3 + self.distance * 0.1) > 0 else (0, 0, 0)
            # Layer 2 and 4
            finish_line_even_layer_color = (0, 0, 0) if math.sin(70 * (1 - perspective) ** 3 + self.distance * 0.1) > 0 else (255, 255, 255)

            for x in range(self.width):
                if x < n_grass:
                    color = grass_color
                elif x >= n_grass_right:
                    color = grass_color
                elif x < n_clip:
                    color = clip_color
                elif x >= n_clip_right:
                    color = clip_color
                elif y > self.finish_line_top and y < self.finish_line_bottom:
                    # Layer 4
                    if n_finish_line_layer4 <= x <= n_finish_line_layer4_right:
                        color = finish_line_even_layer_color
                    # Layer 3
                    elif n_finish_line_layer3 <= x <= n_finish_line_layer3_right:
                        color = finish_line_odd_layer_color
                    # Layer 2
                    elif n_finish_line_layer2 <= x <= n_finish_line_layer2_right:
                        color = finish_line_even_layer_color
                    # Layer 1
                    elif n_finish_line_layer1 <= x <= n_finish_line_layer1_right:
                        color = finish_line_odd_layer_color
                else:
                    color = (128, 128, 128)  # Grey for road
                self.surface.set_at((x, n_row), color)

    def draw_text(self):
        """Draws the text"""
        text_time = self.font.render(f"Time: {self.elapsed_time:.2f} s".replace(".", ","), True, (255, 255, 255))
        self.surface.blit(text_time, (4, 4))

    def draw_car(self):
        if self.car_direction == -2:
            self.car_shape = [
                "1111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000",
                "0111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000",
                "0011111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000",
                "0001000000000000222112220000000000001000000000000000000000000000000000000000000000000000000000000000",
                "0000100000000000022211222000000000000100000000000000000000000000000000000000000000000000000000000000",
                "0000010000000000022221122220000000000010000000000000000000000000000000000000000000000000000000000000",
                "0000000000000000002222112222000000000000000000000000000000000000000000000000000000000000000000000000",
                "0000000000000000002222211222220000000000000000000000000000000000000000000000000000000000000000000000",
                "0000000000000000000222221122222000000000000000000000000000000000000000000000000000000000000000000000",
                "0000000000000000000222222112222220000000000000000000000000000000000000000000000000000000000000000000",
                "0000000000000000000022222211222222000000000000000000000000000000000000000000000000000000000000000000",
                "0000000000000000000022222221122222220000000000000000000000000000000000000000000000000000000000000000",
                "0000000000000000000002222222222222222000000000000000000000000000000000000000000000000000000000000000",
                "0000000000000000000002222222222222222220000000000000000000000000000000000000000000000000000000000000",
                "0000111111111111000000222222222222222222000000111111111111000000000000000000000000000000000000000000",
                "0000111111111111110000222222222222222222220000111111111111110000000000000000000000000000000000000000",
                "0000011111111111111000022222222222222222222000011111111111111000000000000000000000000000000000000000",
                "0000001111111111111100022222222222222222222220001111111111111100000000000000000000000000000000000000",
                "0000000111111111111110002222222222222222222222000111111111111110000000000000000000000000000000000000",
                "0000000011111111111111002222222222222222222222220011111111111111000000000000000000000000000000000000",
                "0000000001111111111111100222222222222222222222222001111111111111100000000000000000000000000000000000",
                "0000000000111111111111112222222222222222222222222222111111111111110000000000000000000000000000000000",
                "0000000000011111111111111222222222222222222222222222211111111111111000000000000000000000000000000000",
                "0000000000001111111111111122222222222222222222222222221111111111111100000000000000000000000000000000",
                "0000000000000111111111111112222222222211111122222222222111111111111110000000000000000000000000000000",
                "0000000000000011111111111111222222211111111111111122222211111111111111000000000000000000000000000000",
                "0000000000000001111111111111122221111111111111111111112221111111111111100000000000000000000000000000",
                "0000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000000",
                "0000000000000000011111111111111111111111111111111111111111111111111111111000000000000000000000000000",
                "0000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000000",
                "0000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000",
                "0000000000000000000011111111111111000000011111111111111100000011111111111111000000000000000000000000",
                "0000000000000000000001111111111111100000000000000000000000000001111111111111100000000000000000000000",
                "0000000000000000000000011111111111100000000000000000000000000000011111111111100000000000000000000000"
            ]
        elif self.car_direction == -1:
            self.car_shape = [
                "0000000000000000111111111111111111111111111111111100000000000000000000000000000000000000000000000000",
                "0000000000000000111111111111111111111111111111111100000000000000000000000000000000000000000000000000",
                "0000000000000000011111111111111111111111111111111110000000000000000000000000000000000000000000000000",
                "0000000000000000010000000000000222112220000000000010000000000000000000000000000000000000000000000000",
                "0000000000000000001000000000000022211222000000000001000000000000000000000000000000000000000000000000",
                "0000000000000000001000000000000222211222200000000001000000000000000000000000000000000000000000000000",
                "0000000000000000000000000000000022221122220000000000000000000000000000000000000000000000000000000000",
                "0000000000000000000000000000000222221122222000000000000000000000000000000000000000000000000000000000",
                "0000000000000000000000000000000022222112222200000000000000000000000000000000000000000000000000000000",
                "0000000000000000000000000000000222222112222220000000000000000000000000000000000000000000000000000000",
                "0000000000000000000000000000000022222211222222000000000000000000000000000000000000000000000000000000",
                "0000000000000000000000000000000222222211222222200000000000000000000000000000000000000000000000000000",
                "0000000000000000000000000000000022222222222222220000000000000000000000000000000000000000000000000000",
                "0000000000000000000000000000000222222222222222222000000000000000000000000000000000000000000000000000",
                "0000000000000011111111111100000022222222222222222200000011111111111100000000000000000000000000000000",
                "0000000000000111111111111110000222222222222222222220000111111111111110000000000000000000000000000000",
                "0000000000000011111111111111000022222222222222222222000011111111111111000000000000000000000000000000",
                "0000000000000011111111111111000222222222222222222222200011111111111111000000000000000000000000000000",
                "0000000000000001111111111111100022222222222222222222220001111111111111100000000000000000000000000000",
                "0000000000000001111111111111100222222222222222222222222001111111111111100000000000000000000000000000",
                "0000000000000000111111111111110022222222222222222222222200111111111111110000000000000000000000000000",
                "0000000000000000111111111111112222222222222222222222222222111111111111110000000000000000000000000000",
                "0000000000000000011111111111111222222222222222222222222222211111111111111000000000000000000000000000",
                "0000000000000000011111111111111222222222222222222222222222211111111111111000000000000000000000000000",
                "0000000000000000001111111111111122222222222111111222222222221111111111111100000000000000000000000000",
                "0000000000000000001111111111111122222221111111111111112222221111111111111100000000000000000000000000",
                "0000000000000000000111111111111112222111111111111111111111222111111111111110000000000000000000000000",
                "0000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000000",
                "0000000000000000000011111111111111111111111111111111111111111111111111111111000000000000000000000000",
                "0000000000000000000011111111111111111111111111111111111111111111111111111111000000000000000000000000",
                "0000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000000",
                "0000000000000000000001111111111111100000001111111111111110000001111111111111100000000000000000000000",
                "0000000000000000000000111111111111110000000000000000000000000000111111111111110000000000000000000000",
                "0000000000000000000000011111111111100000000000000000000000000000011111111111100000000000000000000000"
            ]
        elif self.car_direction == 1:
            self.car_shape = [
                "0000000000000000000000000000000000000000000000001111111111111111111111111111111111000000000000000000",
                "0000000000000000000000000000000000000000000000001111111111111111111111111111111111000000000000000000",
                "0000000000000000000000000000000000000000000000011111111111111111111111111111111110000000000000000000",
                "0000000000000000000000000000000000000000000000010000000000002221122200000000000010000000000000000000",
                "0000000000000000000000000000000000000000000000100000000000022211222000000000000100000000000000000000",
                "0000000000000000000000000000000000000000000000100000000000222211222200000000000100000000000000000000",
                "0000000000000000000000000000000000000000000000000000000002222112222000000000000000000000000000000000",
                "0000000000000000000000000000000000000000000000000000000022222112222200000000000000000000000000000000",
                "0000000000000000000000000000000000000000000000000000000222221122222000000000000000000000000000000000",
                "0000000000000000000000000000000000000000000000000000002222221122222200000000000000000000000000000000",
                "0000000000000000000000000000000000000000000000000000022222211222222000000000000000000000000000000000",
                "0000000000000000000000000000000000000000000000000000222222211222222200000000000000000000000000000000",
                "0000000000000000000000000000000000000000000000000002222222222222222000000000000000000000000000000000",
                "0000000000000000000000000000000000000000000000000022222222222222222200000000000000000000000000000000",
                "0000000000000000000000000000000111111111111000000222222222222222222000000111111111111000000000000000",
                "0000000000000000000000000000001111111111111100002222222222222222222200001111111111111100000000000000",
                "0000000000000000000000000000011111111111111000022222222222222222222000011111111111111000000000000000",
                "0000000000000000000000000000011111111111111000222222222222222222222200011111111111111000000000000000",
                "0000000000000000000000000000111111111111110002222222222222222222222000111111111111110000000000000000",
                "0000000000000000000000000000111111111111110022222222222222222222222200111111111111110000000000000000",
                "0000000000000000000000000001111111111111100222222222222222222222222001111111111111100000000000000000",
                "0000000000000000000000000001111111111111122222222222222222222222222221111111111111100000000000000000",
                "0000000000000000000000000011111111111111222222222222222222222222222211111111111111000000000000000000",
                "0000000000000000000000000011111111111111222222222222222222222222222211111111111111000000000000000000",
                "0000000000000000000000000111111111111112222222222211111122222222222111111111111110000000000000000000",
                "0000000000000000000000000111111111111112222222111111111111111222222111111111111110000000000000000000",
                "0000000000000000000000001111111111111122221111111111111111111112221111111111111100000000000000000000",
                "0000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000000",
                "0000000000000000000000011111111111111111111111111111111111111111111111111111111000000000000000000000",
                "0000000000000000000000011111111111111111111111111111111111111111111111111111111000000000000000000000",
                "0000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000",
                "0000000000000000000000111111111111110000000111111111111111000000111111111111110000000000000000000000",
                "0000000000000000000001111111111111100000000000000000000000000001111111111111100000000000000000000000",
                "0000000000000000000000011111111111100000000000000000000000000000011111111111100000000000000000000000"
            ]
        elif self.car_direction == 2:
            self.car_shape = [
                "0000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111",
                "0000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111110",
                "0000000000000000000000000000000000000000000000000000000000000000111111111111111111111111111111111100",
                "0000000000000000000000000000000000000000000000000000000000000001000000000000222112220000000000001000",
                "0000000000000000000000000000000000000000000000000000000000000010000000000002221122200000000000010000",
                "0000000000000000000000000000000000000000000000000000000000000000000000000222211222200000000000100000",
                "0000000000000000000000000000000000000000000000000000000000000000000000002222112222000000000000000000",
                "0000000000000000000000000000000000000000000000000000000000000000000000222221122222000000000000000000",
                "0000000000000000000000000000000000000000000000000000000000000000000002222211222220000000000000000000",
                "0000000000000000000000000000000000000000000000000000000000000000000222222112222220000000000000000000",
                "0000000000000000000000000000000000000000000000000000000000000000002222221122222200000000000000000000",
                "0000000000000000000000000000000000000000000000000000000000000000222222211222222200000000000000000000",
                "0000000000000000000000000000000000000000000000000000000000000002222222222222222000000000000000000000",
                "0000000000000000000000000000000000000000000000000000000000000222222222222222222000000000000000000000",
                "0000000000000000000000000000000000000000001111111111110000002222222222222222220000001111111111110000",
                "0000000000000000000000000000000000000000111111111111110000222222222222222222220000111111111111110000",
                "0000000000000000000000000000000000000001111111111111100002222222222222222222200001111111111111100000",
                "0000000000000000000000000000000000000011111111111111000222222222222222222222200011111111111111000000",
                "0000000000000000000000000000000000000111111111111110002222222222222222222222000111111111111110000000",
                "0000000000000000000000000000000000001111111111111100222222222222222222222222001111111111111100000000",
                "0000000000000000000000000000000000011111111111111002222222222222222222222220011111111111111000000000",
                "0000000000000000000000000000000000111111111111112222222222222222222222222222111111111111110000000000",
                "0000000000000000000000000000000001111111111111122222222222222222222222222221111111111111100000000000",
                "0000000000000000000000000000000011111111111111222222222222222222222222222211111111111111000000000000",
                "0000000000000000000000000000000111111111111112222222222211111122222222222111111111111110000000000000",
                "0000000000000000000000000000001111111111111122222221111111111111112222221111111111111100000000000000",
                "0000000000000000000000000000011111111111111222211111111111111111111122211111111111111000000000000000",
                "0000000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000",
                "0000000000000000000000000001111111111111111111111111111111111111111111111111111111100000000000000000",
                "0000000000000000000000000011111111111111111111111111111111111111111111111111111111000000000000000000",
                "0000000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000",
                "0000000000000000000000001111111111111100000001111111111111110000001111111111111100000000000000000000",
                "0000000000000000000000011111111111111000000000000000000000000000011111111111111000000000000000000000",
                "0000000000000000000000011111111111100000000000000000000000000000011111111111100000000000000000000000"
            ]
        else:
            self.car_shape = [
                "0000000000000000000000000000000001111111111111111111111111111111111000000000000000000000000000000000",
                "0000000000000000000000000000000001111111111111111111111111111111111000000000000000000000000000000000",
                "0000000000000000000000000000000001111111111111111111111111111111111000000000000000000000000000000000",
                "0000000000000000000000000000000001000000000000222112220000000000001000000000000000000000000000000000",
                "0000000000000000000000000000000001000000000000222112220000000000001000000000000000000000000000000000",
                "0000000000000000000000000000000001000000000002222112222000000000001000000000000000000000000000000000",
                "0000000000000000000000000000000000000000000002222112222000000000000000000000000000000000000000000000",
                "0000000000000000000000000000000000000000000022222112222200000000000000000000000000000000000000000000",
                "0000000000000000000000000000000000000000000022222112222200000000000000000000000000000000000000000000",
                "0000000000000000000000000000000000000000000222222112222220000000000000000000000000000000000000000000",
                "0000000000000000000000000000000000000000000222222112222220000000000000000000000000000000000000000000",
                "0000000000000000000000000000000000000000002222222112222222000000000000000000000000000000000000000000",
                "0000000000000000000000000000000000000000002222222222222222000000000000000000000000000000000000000000",
                "0000000000000000000000000000000000000000022222222222222222200000000000000000000000000000000000000000",
                "0000000000000000000000011111111111100000022222222222222222200000011111111111100000000000000000000000",
                "0000000000000000000000111111111111110000222222222222222222220000111111111111110000000000000000000000",
                "0000000000000000000000111111111111110000222222222222222222220000111111111111110000000000000000000000",
                "0000000000000000000000111111111111110002222222222222222222222000111111111111110000000000000000000000",
                "0000000000000000000000111111111111110002222222222222222222222000111111111111110000000000000000000000",
                "0000000000000000000000111111111111110022222222222222222222222200111111111111110000000000000000000000",
                "0000000000000000000000111111111111110022222222222222222222222200111111111111110000000000000000000000",
                "0000000000000000000000111111111111112222222222222222222222222222111111111111110000000000000000000000",
                "0000000000000000000000111111111111112222222222222222222222222222111111111111110000000000000000000000",
                "0000000000000000000000111111111111112222222222222222222222222222111111111111110000000000000000000000",
                "0000000000000000000000111111111111112222222222211111122222222222111111111111110000000000000000000000",
                "0000000000000000000000111111111111112222222111111111111111222222111111111111110000000000000000000000",
                "0000000000000000000000111111111111112222111111111111111111111222111111111111110000000000000000000000",
                "0000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000",
                "0000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000",
                "0000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000",
                "0000000000000000000000111111111111111111111111111111111111111111111111111111110000000000000000000000",
                "0000000000000000000000111111111111110000000111111111111111000000111111111111110000000000000000000000",
                "0000000000000000000000111111111111110000000000000000000000000000111111111111110000000000000000000000",
                "0000000000000000000000011111111111100000000000000000000000000000011111111111100000000000000000000000"
            ]
        
        self.car_position = self.player_curvature - self.track_curvature
        
        car_x = int((self.car_position * (self.width // 2)) + 30)
        car_y = self.height - 34 - 9
        
        for row_index, row in enumerate(self.car_shape):
            for col_index, pixel in enumerate(row):
                if pixel == '1':
                    self.surface.set_at((car_x + col_index, car_y + row_index), (0, 0, 0))  # Black for '1'
                elif pixel == '2':
                    self.surface.set_at((car_x + col_index, car_y + row_index), (192, 0, 0))  # Red for '2'

if __name__ == "__main__":
    game_instance = game()